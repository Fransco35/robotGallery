{"version":3,"sources":["reportWebVitals.js","constants.js","reducers.js","components/Card.js","components/cardList.js","components/searchBox.js","components/ErrorBoundry.js","containers/App.js","actions.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","alt","src","cardList","cardArray","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","info","this","setState","children","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","ErrorBoundry","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","catch","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","registerServiceWorker"],"mappings":"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","file":"static/js/main.3b81f4fa.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'\r\n","import { CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING, \r\n    REQUEST_ROBOTS_SUCCESS, \r\n     REQUEST_ROBOTS_FAILED \r\n   } \r\n   from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n   switch(action.type) { \r\n       case CHANGE_SEARCH_FIELD:\r\n           return {...state, searchField: action.payload};\r\n           default:\r\n               return state;\r\n   }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending:true}\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots:action.payload, isPending:false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error:action.payload, isPending:false}\r\n        default:\r\n        return state;\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n       <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 '>\r\n           <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} /> \r\n           <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n           </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst cardList = ({robots }) => {\r\n    const cardArray = robots.map((user, i) => {\r\n\r\n    return ( <Card \r\n    key={i} \r\n    id={robots[i].id} \r\n    name={robots[i].name} \r\n    email={robots[i].email}\r\n     />\r\n    \r\n    );\r\n\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {cardArray}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default cardList;","import React from 'react';\r\n\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        aria-label=\"Search Robots\"\r\n          className='pa3 ba b--green bg-lightest-blue' \r\n          type='search' \r\n          placeholder='search robots'\r\n          onChange={searchChange}\r\n         />\r\n        </div>\r\n    ); \r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error, info) {\r\n       this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. Not good</h1>\r\n        } \r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component} from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/cardList';\nimport SearchBox from '../components/searchBox';\n// import Scroll from './scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestRobots } from '../actions'\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n return {\n  onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n}\n}\n\nclass App extends Component {\n\n     componentDidMount () {\n           this.props.onRequestRobots()\n     };\n\n        render() {\n         \n          const {searchField, onSearchChange, robots, isPending} = this.props\n          const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n\n\n        return isPending ?\n        <h1>loading</h1> :\n          (\n            <div className='tc'>\n            <h1 className='f1'>Robots</h1>\n            <SearchBox searchChange={onSearchChange}/>\n            {/* <Scroll> */}\n            <ErrorBoundry>\n           <CardList robots={filteredRobots}/>\n           </ErrorBoundry>\n            {/* </Scroll> */}\n\n            </div>\n        \n            );\n         \n\n        \n          }  \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, \r\n REQUEST_ROBOTS_PENDING, \r\n REQUEST_ROBOTS_SUCCESS, \r\n  REQUEST_ROBOTS_FAILED \r\n} \r\nfrom \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n}); \r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({type: REQUEST_ROBOTS_PENDING});\r\n  fetch ('https://jsonplaceholder.typicode.com/users')\r\n            .then(\r\n              response => response.json()\r\n            )\r\n            .then(\r\n              data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data })\r\n            )\r\n            .catch (\r\n              error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error})\r\n            )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware  from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals'; \nimport {searchRobots, requestRobots} from './reducers'\nimport 'tachyons';\nimport App from './containers/App';\nimport registerServiceWorker from 'react-service-worker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n  <App/>,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nregisterServiceWorker();"],"sourceRoot":""}